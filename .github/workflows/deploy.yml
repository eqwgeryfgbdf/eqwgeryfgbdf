name: 部署配置

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/**'
      - 'update_daily_info.py'
      - 'config.json'
      - 'requirements.txt'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  TZ: Asia/Taipei
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    name: 驗證配置
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 檢出代碼
        uses: actions/checkout@v4
      
      - name: 🐍 設置 Python 環境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 安裝依賴
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 🔍 驗證 Python 腳本語法
        run: |
          python -m py_compile update_daily_info.py
          echo "✅ Python 腳本語法檢查通過"
      
      - name: 🔍 驗證配置文件
        run: |
          python -c "
          import json
          import os
          
          # 檢查配置文件
          if not os.path.exists('config.json'):
              print('❌ 配置文件不存在')
              exit(1)
          
          try:
              with open('config.json', 'r') as f:
                  config = json.load(f)
              print('✅ 配置文件 JSON 語法正確')
              
              # 檢查必要字段
              required_fields = [
                  'update_config.timezone',
                  'update_config.update_time',
                  'update_config.files_to_update'
              ]
              
              for field in required_fields:
                  keys = field.split('.')
                  value = config
                  try:
                      for key in keys:
                          value = value[key]
                  except KeyError:
                      print(f'❌ 缺少必要配置項: {field}')
                      exit(1)
              
              print('✅ 配置文件包含所有必要字段')
              print(f'時區: {config[\"update_config\"][\"timezone\"]}')
              print(f'更新時間: {config[\"update_config\"][\"update_time\"]}')
              print(f'要更新的文件: {config[\"update_config\"][\"files_to_update\"]}')
              
          except json.JSONDecodeError as e:
              print(f'❌ 配置文件 JSON 語法錯誤: {e}')
              exit(1)
          except Exception as e:
              print(f'❌ 配置文件驗證失敗: {e}')
              exit(1)
          "
      
      - name: 🔍 檢查文件存在性
        run: |
          echo "檢查要更新的文件是否存在..."
          python -c "
          import json
          import os
          
          with open('config.json', 'r') as f:
              config = json.load(f)
          
          files_to_check = config['update_config']['files_to_update']
          missing_files = []
          
          for file in files_to_check:
              if not os.path.exists(file):
                  missing_files.append(file)
          
          if missing_files:
              print(f'❌ 以下文件不存在: {missing_files}')
              exit(1)
          else:
              print('✅ 所有要更新的文件都存在')
          "
      
      - name: 🧪 測試腳本執行
        run: |
          echo "測試腳本執行（不實際更新文件）..."
          python -c "
          import sys
          sys.path.append('.')
          
          # 模擬測試執行
          try:
              from update_daily_info import DailyUpdater
              updater = DailyUpdater()
              print('✅ 腳本初始化成功')
              print(f'當前時間: {updater.current_time}')
              print(f'日期字符串: {updater.date_str}')
              print(f'時間字符串: {updater.time_str}')
          except Exception as e:
              print(f'❌ 腳本測試失敗: {e}')
              exit(1)
          "
      
      - name: 📊 生成驗證報告
        if: always()
        run: |
          echo "## 🔍 配置驗證報告" >> $GITHUB_STEP_SUMMARY
          echo "- **驗證時間**: $(date '+%Y-%m-%d %H:%M:%S') (Asia/Taipei)" >> $GITHUB_STEP_SUMMARY
          echo "- **Python 版本**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **部署環境**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **觸發分支**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交 SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: 部署到 ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 5
    
    steps:
      - name: 📥 檢出代碼
        uses: actions/checkout@v4
      
      - name: 🚀 部署完成
        run: |
          echo "✅ 部署到 ${{ github.event.inputs.environment || 'production' }} 環境完成"
          echo "📅 部署時間: $(date '+%Y-%m-%d %H:%M:%S') (Asia/Taipei)"
          echo "🔗 部署提交: ${{ github.sha }}"
      
      - name: 📊 生成部署報告
        run: |
          echo "## 🚀 部署報告" >> $GITHUB_STEP_SUMMARY
          echo "- **部署時間**: $(date '+%Y-%m-%d %H:%M:%S') (Asia/Taipei)" >> $GITHUB_STEP_SUMMARY
          echo "- **部署環境**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **部署分支**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交 SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交者**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交信息**: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
